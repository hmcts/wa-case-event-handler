#!groovy

@Library("Infrastructure")

def type = "java"
def product = "wa"
def component = "case-event-handler"

def secrets = [
    'wa-${env}' : [
        secret('ld-secret', 'LAUNCH_DARKLY_SDK_KEY'),
        secret('cft-case-event-handler-POSTGRES-PASS', 'POSTGRES_PASSWORD'),
        secret('cft-case-event-handler-POSTGRES-USER', 'POSTGRES_USERNAME'),
    ],
    's2s-${env}': [
        secret('microservicekey-wa-case-event-handler', 'S2S_SECRET_CASE_EVENT_HANDLER')
    ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
    [$class     : 'AzureKeyVaultSecret',
     secretType : 'Secret',
     name       : secretName,
     version    : '',
     envVariable: envVar
    ]
}

def branchesToSync = ['demo', 'ithc', 'perftest']

withPipeline(type, product, component) {
    disableLegacyDeployment()

    env.S2S_URL = "http://rpe-service-auth-provider-aat.service.core-compute-aat.internal"
    env.CAMUNDA_URL = "http://camunda-api-aat.service.core-compute-aat.internal/engine-rest"

  loadVaultSecrets(secrets)

    after('test') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/reports/tests/**/*'
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/reports/tests/integration/**/*'
    }

    after('functionalTest:preview') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/site/serenity/**/*'
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/reports/tests/functional/**/*'
    }

    after('functionalTest:aat') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/site/serenity/**/*'
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/reports/tests/functional/**/*'
    }

    // Sync environment specific branches with master branch
    syncBranchesWithMaster(branchesToSync)
}
